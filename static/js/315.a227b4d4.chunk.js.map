{"version":3,"file":"static/js/315.a227b4d4.chunk.js","mappings":"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","sources":["components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/Reviews/Reviews.styled.jsx","utils/getDate.js","components/ReviewCard/ReviewCard.styled.jsx","components/ReviewCard/ReviewCard.jsx","utils/setCorrectAvatarURL.js","components/Reviews/Reviews.jsx","constants/iconSize.js","services/api.js","utils/renderIcons.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const NotificationMessage = styled.p`\n    margin:0;\n    padding: 0;\n    text-align: center;\n    font-size: 50px;\n`;","import PropTypes from 'prop-types';\nimport { NotificationMessage } from './Notification.styled';\n\n\nexport function Notification({children}) {\n  return (\n    <NotificationMessage>\n      {children}\n    </NotificationMessage>\n  );\n\n}\n\nNotification.propTypes = {\n  children: PropTypes.node.isRequired,\n}","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 30px;\n \n  li {\n    background-color: #fde7f0;\n    border-radius:10px;\n    padding: 20px;\n  }\n`;\n\n","import { parseISO, formatDistanceToNow } from 'date-fns';\n\nexport function getReviewDate(date) {\n  const parsedDate = parseISO(date);\n  const hours = pad(parsedDate.getHours());\n  const minutes = pad(parsedDate.getMinutes());\n\n  const options = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  const data = parsedDate.toLocaleString('en-US', options);\n  return `${data} ${hours}:${minutes}`;\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nexport function getLastTimeUpdatedDate(date) {\n  const data = parseISO(date);\n  return formatDistanceToNow(data);\n}\n","import styled from 'styled-components';\n\n\nexport const AvatarImage = styled.img`\n  width: 50x;\n  border-radius: 5px;\n  border: 1px solid  black; \n\n`;\n\nexport const ReviewInfoWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    column-gap: 15px;\n    font-size: 20px;\n    margin: 0;\n\n      .sb-avatar__text {\n      width: 50x;\n      border-radius: 5px;\n      border: 1px solid  black;\n       span {\n          font-size: 22px;\n          color: black;\n          font-weight: 700;\n       }\n    \n\n    }\n\n`\nexport const ReviewText = styled.div`\n  font-size: 16px;\n  line-height: 1.6;\n  margin: 0;\n  margin-top: 20px;\n\n  .show-more-less-clickable {\n    color: #fc458e;\n    font-weight: 700;\n  }\n`\n\nexport const AuthorReview = styled.span`\n  margin-bottom: 25px;\n  color: #fc458e;\n  font-weight: 700;\n  margin: 0;\n`;\n\nexport const DateWrapper= styled.div`\n  display:flex;\n  column-gap: 60px;\n\n`\nexport const DateReview = styled.p`\n  font-style: italic;\n  margin: 0;\n  padding: 0;\n`\n\nexport const UserRating = styled.div`\n    margin: 0;\n    display: flex;\n    column-gap:10px;\n    align-items: center;\n    margin-left: auto;\n    padding: 0;\n     font-size: 26px; \n   svg {\n      fill: #fc458e;\n    }\n`\nexport const Rate = styled.span`\n  font-size: 34px;\n  font-weight: 700;\n`","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ShowMoreText from \"react-show-more-text\";\nimport Avatar from 'react-avatar';\nimport { getReviewDate, getLastTimeUpdatedDate } from 'utils/getDate';\nimport { setCorrectAvatarURL } from 'utils/setCorrectAvatarURL';\nimport { renderIcons } from 'utils/renderIcons';\nimport { iconSize } from 'constants';\nimport { AuthorReview, AvatarImage, DateWrapper, DateReview, ReviewInfoWrapper, ReviewText, UserRating, Rate } from './ReviewCard.styled';\n\n\nexport const ReviewCard = ({review}) => {\n  const { author, author_details: { avatar_path, rating }, created_at, updated_at, content } = review;\n  return (\n    <>\n      <ReviewInfoWrapper>\n          {avatar_path\n          ? \n            <AvatarImage\n              src={setCorrectAvatarURL(avatar_path)}\n              width=\"50\"\n              alt={author}\n            />      \n            : <Avatar size=\"50\" name={author} unstyled={false} />\n        }\n        <AuthorReview>{author}</AuthorReview>\n        <DateWrapper>\n          <DateReview>{getReviewDate(created_at)}</DateReview>\n          <DateReview>updated { getLastTimeUpdatedDate(updated_at)} ago </DateReview>\n        </DateWrapper>\n        {rating &&\n        <UserRating><span><Rate>{rating}</Rate><span> / 10</span></span> { renderIcons('star', iconSize.md)}</UserRating>  \n        }\n      </ReviewInfoWrapper>\n      <ReviewText>\n           <ShowMoreText\n                lines={4}\n                more=\"Show more\"\n                less=\"Show less\"\n                className=\"content-css\"\n                anchorClass=\"show-more-less-clickable\"\n                expanded={false}\n                truncatedEndingComponent={\"... \"}\n            >\n            {content}\n        </ShowMoreText>\n      </ReviewText>\n    </>\n  )\n}\n\n\nReviewCard.propTypes = {\n  review: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    created_at: PropTypes.string.isRequired,\n    updated_at: PropTypes.string.isRequired,\n    author_details: PropTypes.shape({\n      rating: PropTypes.string,\n      avatar_path: PropTypes.string,\n    })\n  })\n}\n  ","export function setCorrectAvatarURL(avatarURL) {\n  if (avatarURL?.match(/^(\\/)?http(s)?:\\/\\//)) {\n    return avatarURL.replace(/^\\//, '');\n  }\n  return `https://image.tmdb.org/t/p/original${avatarURL}`;\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'services/api';\nimport { ReviewsList } from './Reviews.styled';\nimport { ReviewCard } from 'components/ReviewCard';\nimport { Notification } from 'components/Notification';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isReviewsHidden, setIsReviewsHidden] = useState(true);\n  const { movieId } = useParams();\n  const [error, setError] = useState(false);\n\n\n  useEffect(() => {\n    async function fetchMovieReviews(movieId) {\n      try {\n        const reviews = await API.getMovieReviews(movieId);\n        setMovieReviews(reviews);\n        setError(false);\n      } catch {\n        setError(true);\n      }\n      finally {\n        setIsReviewsHidden(false);\n      }\n    }\n\n  fetchMovieReviews(movieId)\n  }, [movieId]);\n\n\n  if (!movieReviews) {\n    return null;\n  }\n\n  return (\n    <>\n      {error && <p>Something went wrong. Please try again</p>}\n      {isReviewsHidden === false &&\n        (movieReviews.length > 0\n        ? <ReviewsList>\n          {movieReviews.map(review => (\n            <li key={review.id}>\n              <ReviewCard review={review}></ReviewCard>\n            </li>\n            ))}\n        </ReviewsList>\n        : <Notification>Sorry, but there are no reviews for this movie.</Notification>\n        )}\n    </>\n  );\n};\n\nexport default Reviews;","export const iconSize = Object.freeze({\n  sm: 30,\n  md: 45,\n  lg: 80,\n});\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '5e62b2453973c629f1496ace3a4b7719';\n\nexport async function getTrendingMovies(page) {\n  const result = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&&page=${page}`\n  );\n  return result.data;\n}\n\nexport async function getMoviesByQuery(query, page) {\n  const result = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&&page=${page}`\n  );\n  return result.data;\n}\n\nexport async function getMovieDetails(id) {\n  const result = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return result.data;\n}\n\nexport async function getMovieCast(id) {\n  const result = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return result.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const result = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return result.data.results;\n}\n","import { TbMovie } from 'react-icons/tb';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\nimport { RiMovie2Fill } from 'react-icons/ri';\nimport { ImSearch } from 'react-icons/im';\nimport { FaRegSadCry } from 'react-icons/fa';\nimport { ImStarFull } from 'react-icons/im';\nimport { AiFillLike } from 'react-icons/ai';\nimport { AiFillDislike } from 'react-icons/ai';\nimport { HiArrowNarrowLeft } from 'react-icons/hi';\nimport { HiArrowNarrowRight } from 'react-icons/hi';\nimport { HiDotsHorizontal } from 'react-icons/hi';\n\nexport function renderIcons(param, size) {\n  switch (param) {\n    case 'movie':\n      return <TbMovie size={size} className=\"contact-form__icon\" />;\n    case 'back':\n      return <IoMdArrowRoundBack size={size} className=\"contact-form__icon\" />;\n    case 'film':\n      return <RiMovie2Fill size={size} className=\"contact-form__icon\" />;\n    case 'search':\n      return <ImSearch size={size} className=\"contact-form__icon\" />;\n    case 'error':\n      return <FaRegSadCry size={size} className=\"contact-form__icon\" />;\n    case 'star':\n      return (\n        <ImStarFull size={size} className=\"contact-form__icon full-star\" />\n      );\n    case 'like':\n      return <AiFillLike size={size} className=\"contact-form__icon like\" />;\n    case 'dislike':\n      return <AiFillDislike size={size} className=\"contact-form__icon like\" />;\n    case 'ellipsis':\n      return (\n        <HiDotsHorizontal size={size} className=\"contact-form__icon like\" />\n      );\n    case 'left':\n      return (\n        <HiArrowNarrowLeft size={size} className=\"contact-form__icon like\" />\n      );\n    case 'right':\n      return (\n        <HiArrowNarrowRight size={size} className=\"contact-form__icon like\" />\n      );\n    default:\n      return <span>icon</span>;\n  }\n}\n"],"names":["NotificationMessage","styled","Notification","children","ReviewsList","getReviewDate","date","parsedDate","parseISO","hours","pad","getHours","minutes","getMinutes","data","toLocaleString","year","month","day","value","String","padStart","getLastTimeUpdatedDate","formatDistanceToNow","AvatarImage","ReviewInfoWrapper","ReviewText","AuthorReview","DateWrapper","DateReview","UserRating","Rate","ReviewCard","avatarURL","review","author","author_details","avatar_path","rating","created_at","updated_at","content","src","match","replace","width","alt","size","name","unstyled","renderIcons","iconSize","ShowMoreText","lines","more","less","className","anchorClass","expanded","truncatedEndingComponent","useState","movieReviews","setMovieReviews","isReviewsHidden","setIsReviewsHidden","movieId","useParams","error","setError","useEffect","API","reviews","fetchMovieReviews","length","map","id","Object","freeze","sm","md","lg","axios","API_KEY","getTrendingMovies","page","result","getMoviesByQuery","query","getMovieDetails","getMovieCast","cast","getMovieReviews","results","param"],"sourceRoot":""}