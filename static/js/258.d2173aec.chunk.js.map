{"version":3,"file":"static/js/258.d2173aec.chunk.js","mappings":"wRAEaA,EAAWC,EAAAA,GAAAA,GAAH,4EAMRC,EAAWD,EAAAA,GAAAA,GAAH,2SAgBRE,EAAQF,EAAAA,GAAAA,IAAH,oEAKLG,EAAYH,EAAAA,GAAAA,IAAH,2T,UC3BTI,EAAQJ,EAAAA,GAAAA,IAAH,yP,SCEX,SAASK,EAAT,GAAmC,IAAZC,EAAW,EAAXA,SAC5B,OACE,SAACF,EAAD,UACGE,GAIN,CCJD,IAkEA,EAlEa,WACX,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OAnBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA8BF,GAA9B,gGAEuBG,EAAAA,GAAiBH,GAFxC,OAEUI,EAFV,OAGIT,EAAaS,GAEbL,GAAS,GALb,gDAOIA,GAAS,GAPb,yBAUIF,GAAgB,GAVpB,4EADc,yBAAC,SAAD,2BAehBQ,CAAeL,EACd,GAAE,CAACA,IAGCN,GAMH,gCACKI,IAAS,SAACP,EAAD,sDACQ,IAAjBK,IAA4BF,EAAUY,OAAS,GAC9C,SAACrB,EAAD,UACES,EAAUa,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzC,OACE,UAACxB,EAAD,YACE,SAACC,EAAD,CACEwB,IACEH,EAAY,6CAC8BA,GACtC,+GAENI,IAAKH,KAGP,UAACrB,EAAD,YACE,wBAAKqB,KACL,uBAAIC,SAZOH,EAiBlB,OAED,SAACM,EAAA,EAAD,wEA9BC,IAkCV,C,sECnEYC,E,QAAsB7B,GAAAA,EAAH,uG,SCEzB,SAAS4B,EAAT,GAAmC,IAAZtB,EAAW,EAAXA,SAC5B,OACE,SAACuB,EAAD,UACGvB,GAIN,C,mMCTDwB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACgBH,EAAAA,EAAAA,IAAA,sCACYC,EADZ,kBAC6BE,IAF7C,cACCC,EADD,yBAIEA,EAAOC,MAJT,kEAOA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAgCC,EAAOJ,GAAvC,uFACgBH,EAAAA,EAAAA,IAAA,gCACMC,EADN,kBACuBM,EADvB,kBACsCJ,IAFtD,cACCC,EADD,yBAIEA,EAAOC,MAJT,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BhB,GAA/B,uFACgBQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,oBAAkCS,IADlD,cACCG,EADD,yBAEEA,EAAOC,MAFT,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BjB,GAA5B,uFACgBQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,4BAA0CS,IAD1D,cACCG,EADD,yBAEEA,EAAOC,KAAKjB,MAFd,kEAKA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BlB,GAA/B,uFACgBQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,4BAA0CS,IAD1D,cACCG,EADD,yBAEEA,EAAOC,KAAKM,SAFd,kE","sources":["components/Cast/Cast.styled.jsx","components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","components/Cast/Cast.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const ListItem = styled.li`\n  width: calc((100% - 80px) / 5);\n  display: flex;\n  row-gap: 20px;\n  flex-direction: column;\n  justify-content: space-between; \n  border-radius: 5px;\n  overflow: hidden;\n  background-color: #fde7f0;\n  padding-bottom: 20px;\n  color: black;\n  font-size: 20px;\n\n \n`;\n\nexport const Image = styled.img`\n    height: 324px;\n    object-fit: cover;\n`;\n\nexport const ActorInfo = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  flex-grow: 1; \n\n  h4 {\n    font-size:22px;\n    margin: 0;\n    margin-bottom: 10px;\n    text-align: center;\n  }\n\n  p{\n    font-size:20px;\n    font-weight: 500;\n    font-style: italic;\n    margin: 0;\n    text-align: center;\n  }\n`;\n\n","import styled from 'styled-components';\n\nexport const Error = styled.div`\n    margin:0;\n    padding: 80px;\n    text-align: center;\n    font-size: 30px;\n    font-style: italic;\n    font-weight: 900;\n    display: flex;\n    flex-direction: column;\n    row-gap: 20px;\n    align-items: center;\n`;","import PropTypes from 'prop-types';\nimport { Error } from './ErrorMessage.styled';\n\n\nexport function ErrorMessage({children}) {\n  return (\n    <Error>\n      {children}\n    </Error>\n  );\n\n}\n\nErrorMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'services/api';\nimport { CastList, ListItem, Image, ActorInfo } from './Cast.styled';\nimport { Notification } from 'components/Notification';\nimport { ErrorMessage } from 'components/ErrorMessage';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isCastHidden, setIsCastHidden] = useState(true);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  \n\n\n  useEffect(() => {\n    async function fetchMovieCast(movieId) {\n      try {\n        const cast = await API.getMovieCast(movieId);\n        setMovieCast(cast);\n\n        setError(false);\n      } catch {\n        setError(true);\n      }\n      finally {\n        setIsCastHidden(false);\n      }\n    }\n\n  fetchMovieCast(movieId)\n  }, [movieId]);\n\n\n  if (!movieCast) {\n    return null;\n  }\n\n\n  return (\n    <>\n        {error && <ErrorMessage>Something went wrong. Please try again</ErrorMessage>}\n        {isCastHidden === false  && (movieCast.length > 0\n        ? <CastList>\n          {(movieCast.map(({ id, profile_path, name, character }) => {\n            return (\n              <ListItem key={id}>\n                <Image\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/original${profile_path}`\n                      : 'https://www.reachingoutacrossdurham.co.uk/app/uploads/2021/04/Staff-Profile-Image-Placeholder-01-300x300.png'\n                  }\n                  alt={name}\n                    \n                />\n                <ActorInfo>\n                  <h4>{name}</h4>\n                  <p>{character}</p>\n                      \n                </ActorInfo>\n              </ListItem>\n            );\n          }))}\n          </CastList>\n        : <Notification>Sorry, but there is no info about cast of this movie.</Notification>\n        )}\n    </>\n  );\n};\n\n\n\nexport default Cast;","import styled from 'styled-components';\n\nexport const NotificationMessage = styled.p`\n    margin:0;\n    padding: 0;\n    text-align: center;\n    font-size: 50px;\n`;","import PropTypes from 'prop-types';\nimport { NotificationMessage } from './Notification.styled';\n\n\nexport function Notification({children}) {\n  return (\n    <NotificationMessage>\n      {children}\n    </NotificationMessage>\n  );\n\n}\n\nNotification.propTypes = {\n  children: PropTypes.node.isRequired,\n}","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '5e62b2453973c629f1496ace3a4b7719';\n\nexport async function getTrendingMovies(page) {\n  const result = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&&page=${page}`\n  );\n  return result.data;\n}\n\nexport async function getMoviesByQuery(query, page) {\n  const result = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&&page=${page}`\n  );\n  return result.data;\n}\n\nexport async function getMovieDetails(id) {\n  const result = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return result.data;\n}\n\nexport async function getMovieCast(id) {\n  const result = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return result.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const result = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return result.data.results;\n}\n"],"names":["CastList","styled","ListItem","Image","ActorInfo","Error","ErrorMessage","children","useState","movieCast","setMovieCast","isCastHidden","setIsCastHidden","error","setError","movieId","useParams","useEffect","API","cast","fetchMovieCast","length","map","id","profile_path","name","character","src","alt","Notification","NotificationMessage","axios","API_KEY","getTrendingMovies","page","result","data","getMoviesByQuery","query","getMovieDetails","getMovieCast","getMovieReviews","results"],"sourceRoot":""}